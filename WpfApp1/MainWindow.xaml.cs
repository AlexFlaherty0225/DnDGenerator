using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;



namespace DnDGenerator
{
    /// Interaction logic for MainWindow.xaml
    public partial class MainWindow : Window
    { 
        public MainWindow()
        {
            InitializeComponent();
            PotionGenerator.Initialize();
        }

        // Potion button on-click handler.
        private void PotionBtn_Click(object sender, RoutedEventArgs e)
        {
            // Add generated item to list.
            ListBoxItem generatedItem = new ListBoxItem();
            generatedItem.Content = PotionGenerator.GenPotion();
            MainList.Items.Insert(0, generatedItem);
            
        }

        private void MagicItemBtn_Click(object sender, RoutedEventArgs e)
        {
            ListBoxItem generatedItem = new ListBoxItem();
            generatedItem.Content = "Hello! I was generated by the Magic Item button.";
            MainList.Items.Insert(0, generatedItem);

        }

        private void NPCBtn_Click(object sender, RoutedEventArgs e)
        {
            ListBoxItem generatedItem = new ListBoxItem();
            generatedItem.Content = "Hello! I was generated by the NPC button.";
            MainList.Items.Insert(0, generatedItem);

        }
    }

    // Helper class for potion generation.
    static public class PotionGenerator
    {
        // Lists to store all possible potion generation outcomes.
        static List<string> Titles = new List<string>();
        static List<string> Effects = new List<string>();
        static List<string> Strengths = new List<string>();
        static List<string> SideEffects = new List<string>();
        static List<string> Containers = new List<string>();
        static List<string> Appearances = new List<string>();
        static List<string> AppearanceFeatures = new List<string>();
        static List<string> Textures = new List<string>();
        static List<string> Tastes = new List<string>();
        static List<string> Labels = new List<string>();

        static public void Initialize()
        {
            System.IO.StreamReader file = new System.IO.StreamReader("../../Resources/Potions.txt");
            string line;

            if ( file != null )
            {
                // File read loop
                while ( ! file.EndOfStream )
                {
                    line = file.ReadLine();

                    // Look for data headers and then feed following data into appropriate list.
                    switch (line)
                    {
                        case "Title":
                            while( ! file.EndOfStream )
                            {
                                line = file.ReadLine();

                                // Empty lines split up data headers.
                                if (string.IsNullOrEmpty(line))
                                    break;
                                else
                                    Titles.Add(line);
                            }
                            break;
                        case "Effect":
                            while (!file.EndOfStream)
                            {
                                line = file.ReadLine();

                                // Empty lines split up data headers.
                                if (string.IsNullOrEmpty(line))
                                    break;
                                else
                                    Effects.Add(line);
                            }
                            break;
                        case "Strength":
                            while (!file.EndOfStream)
                            {
                                line = file.ReadLine();

                                // Empty lines split up data headers.
                                if (string.IsNullOrEmpty(line))
                                    break;
                                else
                                    Strengths.Add(line);
                            }
                            break;
                        case "SideEffect":
                            while (!file.EndOfStream)
                            {
                                line = file.ReadLine();

                                // Empty lines split up data headers.
                                if (string.IsNullOrEmpty(line))
                                    break;
                                else
                                    SideEffects.Add(line);
                            }
                            break;
                        case "Container":
                            while (!file.EndOfStream)
                            {
                                line = file.ReadLine();

                                // Empty lines split up data headers.
                                if (string.IsNullOrEmpty(line))
                                    break;
                                else
                                    Containers.Add(line);
                            }
                            break;
                        case "Appearance":
                            while (!file.EndOfStream)
                            {
                                line = file.ReadLine();

                                // Empty lines split up data headers.
                                if (string.IsNullOrEmpty(line))
                                    break;
                                else
                                    Appearances.Add(line);
                            }
                            break;
                        case "AppearanceFeature":
                            while (!file.EndOfStream)
                            {
                                line = file.ReadLine();

                                // Empty lines split up data headers.
                                if (string.IsNullOrEmpty(line))
                                    break;
                                else
                                    AppearanceFeatures.Add(line);
                            }
                            break;
                        case "Texture":
                            while (!file.EndOfStream)
                            {
                                line = file.ReadLine();

                                // Empty lines split up data headers.
                                if (string.IsNullOrEmpty(line))
                                    break;
                                else
                                    Textures.Add(line);
                            }
                            break;
                        case "Taste":
                            while (!file.EndOfStream)
                            {
                                line = file.ReadLine();

                                // Empty lines split up data headers.
                                if (string.IsNullOrEmpty(line))
                                    break;
                                else
                                    Tastes.Add(line);
                            }
                            break;
                        case "Label":
                            while (!file.EndOfStream)
                            {
                                line = file.ReadLine();

                                // Empty lines split up data headers.
                                if (string.IsNullOrEmpty(line))
                                    break;
                                else
                                    Labels.Add(line);
                            }
                            break;
                        default:
                            break;
                    }
                }
                // Close file. Done operations.
                file.Close();
                file = null;
            }
        }
        static public string GenPotion()
        {
            string ret = "";
            Random rando = new Random();
            int diceRoll = 0;

            diceRoll = rando.Next(0, Titles.Count);
            ret += Titles[diceRoll];

            diceRoll = rando.Next(0, Effects.Count);
            ret += " of " + Effects[diceRoll];

            diceRoll = rando.Next(0, Strengths.Count);
            ret += "\nStrength: " + Strengths[diceRoll];

            if ( ! ret.Contains("no side effect") )
            {
                diceRoll = rando.Next(0, SideEffects.Count);
                ret += "\nSide Effect: " + SideEffects[diceRoll];
            }

            diceRoll = rando.Next(0, Containers.Count);
            ret += "\nContainer: " + Containers[diceRoll];

            diceRoll = rando.Next(0, Appearances.Count);
            ret += "\nAppearance: " + Appearances[diceRoll];

            diceRoll = rando.Next(0, AppearanceFeatures.Count);
            ret += " " + AppearanceFeatures[diceRoll];

            diceRoll = rando.Next(0, Textures.Count);
            ret += " " + Textures[diceRoll];

            diceRoll = rando.Next(0, Tastes.Count);
            ret += "\nSmells like: " + Tastes[diceRoll];

            diceRoll = rando.Next(0, Tastes.Count);
            ret += "\nBut tastes like: " + Tastes[diceRoll];

            diceRoll = rando.Next(0, Labels.Count);
            ret += "\n" + Labels[diceRoll];

            return ret;
        }
    }
}
